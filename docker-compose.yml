services:
  web-app:
    build: /services/web_app
    image: web-app
    ports:
      - "5000:5000"     
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_QUEUE=${REDIS_QUEUE}
      - REDIS_DATA_COUNTER_KEY=${REDIS_DATA_COUNTER_KEY}
      - REDIS_RESPONSE_CHANNEL=${REDIS_RESPONSE_CHANNEL}
      - DEVELOPMENT=0
    networks:
      - monitoring

  backend:
    build: /services/stl_generation
    image: backend
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_QUEUE=${REDIS_QUEUE}
      - REDIS_RESPONSE_CHANNEL=${REDIS_RESPONSE_CHANNEL}
    networks:
      - monitoring

  custom-redis:
    build: /services/custom_redis
    image: custom-redis
    networks:
      - monitoring
    volumes:
      - redis-data:/data
 
  custom-prometheus:
    build: /services/custom_prometheus
    image: custom-prometheus
    ports:
      - "9090:9090"
    networks:
      - monitoring

  custom-grafana:
    build: /services/custom_grafana
    image: custom-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    ports:
      - "3000:3000"
    networks:
      - monitoring

  metrics-exporter:
    build: /services/metrics_exporter
    image: metrics-exporter
    ports:
      - "8000:8000"
    networks:
      - monitoring    

networks:
  monitoring:
    driver: bridge

volumes:
  frontend-data:
  redis-data:
